AWSTemplateFormatVersion: '2010-09-09'
Resources:
  servicescaleup:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ecs-services-scale-up'
      Handler: ecs-service-scale-up.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: MyBucket
        S3Key: ecs-service-scale-up.zip
      Runtime: python3.11
      Timeout: 30
  servicescaledown:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ecs-services-scale-down'
      Handler: ecs-service-scale-down.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: MyBucket
        S3Key: ecs-service-scale-down.zip
      Runtime: python3.11
      Timeout: 30
  ECSStateServiceTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: ecs_state_services
      AttributeDefinitions:
        - AttributeName: name_services
          AttributeType: S
      KeySchema:
        - AttributeName: name_services
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: 'Descricao'
          Value: 'Tabela usada para armazenar informações para a solução de scale réplicas de serviços de clusters ECS'
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Scan'
                Resource: !GetAtt ECSStateServiceTable.Arn
        - PolicyName: LambdaECSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:UpdateService'
                  - 'ecs:ListServices'
                  - 'ecs:ListAttributes'
                  - 'ecs:ListTasks'
                  - 'ecs:DescribeServices'
                  - 'ecs:DescribeClusters'
                  - 'ecs:ListClusters'
                Resource: '*'
        - PolicyName: LambdaCWPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  SchedulerUpExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SchedulerUPExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt servicescaleup.Arn
  SchedulerDownExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SchedulerDownExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt servicescaledown.Arn

  ScheduleStart:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: 'Schedule para acionamento da lambda para scale-up dos services do ECS'
      Name: 'schedule-ecs-service-scale-up'
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpression: 'cron(0 7 * * ? *)' # Executar todos os dias às 8:00 UTC (horário pode ser ajustado conforme necessário)
      State: 'ENABLED'
      Target:
        RoleArn: !GetAtt SchedulerUpExecutionRole.Arn
        Arn: !GetAtt servicescaleup.Arn

  ScheduleStop:
    Type: 'AWS::Scheduler::Schedule'
    Properties:
      Description: 'Schedule para acionamento da lambda para scale-down dos services do ECS'
      Name: 'schedule-ecs-service-scale-down'
      FlexibleTimeWindow:
        Mode: 'OFF'
      ScheduleExpression: 'cron(0 20 * * ? *)' # Executar todos os dias às 20:00 UTC (horário pode ser ajustado conforme necessário)
      State: 'ENABLED'
      Target:
        RoleArn: !GetAtt SchedulerDownExecutionRole.Arn
        Arn: !GetAtt servicescaledown.Arn
